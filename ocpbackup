#!/bin/bash

# Define helptext for usage
function help() {
  echo "Usage:"
  echo -e "\t ocpbackup -h\t\t\tDisplay this help message."
  echo -e "\t ocpbackup -b PATH\t\tDefine the directory, where to save the files."
  echo -e "\t ocpbackup -a\t\t\tBackup all projects you have access to."
  echo -e "\t ocpbackup -p PROJECT_NAME\tBackup a specific project."
}

function pre() {
  # Check for "oc"
  OC=$(command -v oc)
  # Since "if [ -x EMPTY_STRING ]" is always true, we have to check if the string
  # is empty -.-
  if [ ! -z $OC ] && [ -x $OC ]; then
    OC_TOOL=$OC
    echo -e "[Success] oc found in \"$OC_TOOL\"."
  else
    echo -e "[Error] You need to install \"oc\" to proceed with backup!"
    exit 1
  fi

  # Check if we are logged in
  $OC_TOOL whoami > /dev/null
  if [[ $? -ne 0 ]]; then
    echo -e "[Error] You need to login first!"
    exit 1
  else
    USER=$($OC_TOOL whoami &)
    echo -e "[Success] Using user \"$USER\" for backup."
  fi
}

function find_project {
  project=$1
  $OC_TOOL projects -q | grep $project > /dev/null
  if [[ $? -eq 0 ]]; then
    echo "[Success] Project \"$project\" found."
  else
    echo "[Error] No project \"$project\" available!"
  fi
}

function create_root_path {
  backup_path=$1

  if [ -d "$backup_path" ]; then
    echo "[Info] Path already exists, nothing to do."
    return 0
  else
    echo "[Info] Creating path $backup_path."
    mkdir -p $backup_path
    if [[ $? -ne 0 ]]; then
      echo "[Error] Could not create root backup path. Aborting..."
      exit 1
    fi
  fi
}

function create_project_directory {
  backup_path=$1
  project_name=$2

  if [ -d "$backup_path" ] && [ -d "${backup_path}/${project_name}" ]; then
    echo "[Info] Project backup dir for project $project_name present."
  else
    mkdir -p ${backup_path}/${project_name}
  fi
}

function backup_project {
  project_name=$1
  backup_dir=$2
  $OC_TOOL export all -n $project_name -o yaml > ${backup_dir}/${project_name}/project.yaml
}

function backup_rolebindings {
  project_name=$1
  backup_dir=$2
  $OC_TOOL get rolebindings -n $project_name -o yaml --export=true > ${backup_dir}/${project_name}/rolebindings.yaml
}

function backup_serviceaccounts {
  project_name=$1
  backup_dir=$2
  $OC_TOOL get serviceaccounts -n $project_name -o yaml --export=true > ${backup_dir}/${project_name}/serviceaccount.yaml
}

function backup_secrets {
  project_name=$1
  backup_dir=$2
  $OC_TOOL get secret -n $project_name -o yaml --export=true > ${backup_dir}/${project_name}/secret.yaml
}

function backup_pvc {
  project_name=$1
  backup_dir=$2
  $OC_TOOL get pvc -n $project_name -o yaml --export=true > ${backup_dir}/${project_name}/pvc.yaml
}

function secure_wait {
  echo "[Warning] This backup will DESTROY PREVIOUS BACKUPS! Waiting 5s for CTRL-C..."
  sleep 6
}

function backup {
  project_name=$1
  root_dir=$2

  create_root_path $root_dir
  create_project_directory $root_dir $project_name
  backup_project $project_name $root_dir
  backup_rolebindings $project_name $root_dir
  backup_serviceaccounts $project_name $root_dir
  backup_secrets $project_name $root_dir
  backup_pvc $project_name $root_dir

  echo "[Info] Backup finished for project $project_name."
}

# Get arguments
while getopts "hb:ap:" opt; do
  case ${opt} in
    h)
      help
    ;;
    b)
      path_value="$OPTARG"
    ;;
    p)
      project_value="$OPTARG"
      backup_single=1
    ;;
    a)
      backup_all=1
    ;;
    \?)
      echo "Invalid option: $OPTARG" 1>&2
      help
      exit 1
    ;;
    *)
      help
      exit 1
    ;;
  esac
done
shift $((OPTIND -1))

# Mode 1 is backup single project
# Mode 2 is backup ALL projects available

if [[ $backup_single -eq 1 ]] && [[ $backup_all -eq 1 ]]; then
  echo "[Error] Cannot backup all projects AND single project. Aborting..."
  help
  exit 2
fi

if [ -z "$backup_single" ] && [ -z "$backup_all" ]; then
  echo "[Error] No project to backup provided. To backup all, use the \"-a\". Aborting..."
  help
  exit 2
fi

if [ -z "$path_value" ]; then
  echo "[Error] No backup directory given. Aborting..."
  exit 1
fi

if [[ $backup_single -eq 1 ]]; then
  if [ -n "$project_value" ]; then
    pre
    secure_wait
    backup $project_value $path_value
  else
    echo "[Error] No projectname given. Aborting!"
    exit 1
  fi
fi

if [[ $backup_all -eq 1 ]]; then
  pre
  secure_wait
  for project in $($OC_TOOL projects -q); do
    backup $project $path_value
  done
fi
